---------------passsing query object in find function-------------

db.movieDetails.find({rated:"PG-13"}).pretty() // it will check moviesDetails obbjcet key rated and whoever has 	
												PG-13 rating it will print them

db.movieDetails.find({rated:"PG-13"}).count() // print the count of data no, only documents matching these criteria 
												will print
												// for passing objects key we need to enclose them in quotes.

------------------Equality Matches on Arrays----------------------
-- On the entire array
-- Based on any element
-- Based on specific element
-- more complex matches

---------------------On the entire array------------------
db.movieDetails.find({"writers":["Ethen", "Coen"]}).pretty()

1) order of array elements matter

db.movieDetails.find({"writers": "jeff"}).pretty() // one element in array only

db.movieDetails.find({"writers.0": "jeff"}).pretty() // specify the element no in array only


-----------------Cursors-----------------
find menthod return cursor
to access document, we need cursor to iterate through cursor.
if we don't store find method return in var, then it will run and show first 20 initial set of result data.
mongodb return result in batches.
batch size will not exceed the maximum size of BSON documents size.
for most queries it will return 101 documents or 1mb data size, subsequent documents will be 4mb
to iterate we use ----it keyword------

var c = db.moviedetails.find();  // store cursore in var
var doc = function(){        	 // check if documents left or not
	return c.hasNext() ? c.next() : null;
}
c.objsLeftInBtach(); 			 // it will return remaining object count
doc()							 // it will return single document


------------------Projection----------------------------
it will reduce the network load thorught limiting the data feilds which are required only, other feild it will discard.
it is 2nd argument.
db.movieDetails.find({"writers": "jeff"},{title : 1}).pretty() // one element in array only

_id will return by default. So if u don wann that then male it 0 in projection.
db.movieDetails.find({"writers": "jeff"},{title : 1,id : 0}).pretty() // one element in array only
to exclude feilds then we need to make it them 0.


----------------------Comparison Operators --------------------

db.movieDetails.find({runtime : { $gt: 90 } }).pretty()
db.movieDetails.find({runtime : { $gt: 90 , $lt: 150 } }).pretty()
db.movieDetails.find({runtime : { $gte: 90 , $lte: 150 } }).pretty()
db.movieDetails.find({runtime : { $gte: 90 , $lte: 150 } }, {title : 1, runtime : 1, _id : 0}).pretty()
db.movieDetails.find({runtime : {"tomato.meter" : {$gte: 90 } , runtime : {$lte: 150 } }, {title : 1, runtime : 1, _id : 0}).pretty()
db.movieDetails.find({rated : { $ne: "UNRATED"} }).pretty()

the value of $in must be a array. oppsite of this is $nin :)
db.movieDetails.find({rated : { $in: ["UNRATED","G","PG"]} }).pretty()



------------------------Elements Operators-------------------------

$exists : check weather key is exists or not in document

$type : select document field for sepcific type.

for data cleaning we can use this.or to get to know what kind of field is this.

db.movieDetails.find({"tomato.meter" : { $exists: true} }).pretty()

db.movieDetails.find({"_id" : { $type: "string"} }).pretty() // it will return all document which id is string value.


------------------------- Logical Operator---------------------------

$or, $and , $not, $nor


$or : db.movieDetails.find({ $or : [{"tomato.meter" : { $gt: 90}}, {"metacritic" : { $gt: 88}}]}).pretty()

$and : db.movieDetails.find({ $and : [{"tomato.meter" : { $gt: 90}}, {"metacritic" : { $gt: 88}}]}).pretty()

			---------------------these both are same-----------------

		db.movieDetails.find({"tomato.meter" : { $gt: 90}}, {"metacritic" : { $gt: 88}}).pretty()

then why we use $and ???????????????

bcz $and give us functionality to apply constraint on same key multiple times. these the $and advantage. :D ex :-

db.movieDetails.find({ $and : [{"metacritic" : { $nt: null}}, {"metacritic" : { $exists: true}}]}).pretty()



------------------------------RegEx expressions--------------------------

match fields with string values.

db.movieDetails.find({"awards.text" : { $regex: /^Won.*/}}).pretty()

db.movieDetails.find({"awards.text" : { $regex: /^Won\s*/}}).pretty()

-----------------------Array Operators------------------------------

$all - Matches array that contain all elements specified in the query.

$elemMatch - selects documents if element in the array field  matches all the specified $elemMatch conditions
			to perform query on array of documents, in which we want to apply query on more then 1 field. 

$size - select doc if the array field is a specified size.

db.movieDetails.find({geners :{ $all : ["c" , "v" , "d"] }}).pretty()

db.movieDetails.find({countries :{ $size : 1}}).pretty()

db.movieDetails.find({boxoffice : { $elemMatch : {country : "UK", revenue : {$gt : 90}}}}).pretty()



-----------------------------Update in CURD--------------------------

Sometimes update will create new document in collections
Update One
Update Many
Replace One

db.movieDetails.updateOne({countries :{ $size : 1}}, {$set :{poster : "update data"}}).pretty()

while pushing specifyy position with position : 0  field.
$push used for push doc in collection.

--------------------------------------------------------------------------------------------------------------
********** Which of the choices below is the title of a movie from the year 2013 that is rated PG-13 and won no awards?********

 db.movieDetails.find({year : {$eq : 2013},rated : {$eq : "PG-13"}, "awards.wins" : {$eq : 0} },{title :1}).pretty()
{
        "_id" : ObjectId("5692a3e124de1e0ce2dfda22"),
        "title" : "A Decade of Decadence, Pt. 2: Legacy of Dreams"
}
--------------------------------------------------------------------------------------------------------------

************* Using the video.movieDetails collection, how many movies list "Sweden" second in the the list of countries.***********

> db.movieDetails.find({"countries.1" : "Sweden"}).count()
6

--------------------------------------------------------------------------------------------------------------
**********How many documents in our video.movieDetails collection list just the following two genres: "Comedy" and "Crime" with "Comedy" listed first.***********

> db.movieDetails.find({ "genres": ["Comedy", "Crime"] }).count()
20
>
--------------------------------------------------------------------------------------------------------------
************As a follow up to the previous question, how many documents in the video.movieDetails collection list both "Comedy" and "Crime" as genres regardless of how many other genres are listed?************

db.movieDetails.find({ "genres": {$all: ["Comedy", "Crime"] } })

--------------------------------------------------------------------------------------------------------------


 db.movieDetails.find({"imdb.rating" : {$lt : 10000}, $and : [{"year" :{$gt : 2010}},{"year" : {$lt : 2013}}]},{" tomato.consensus" : { $type: "null"} }).count()